# --- Removed 'version' tag as it is obsolete ---

services:
  # PostgreSQL for Airflow and MLflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 30s
      retries: 5

  # Redis for Airflow
  redis:
    image: redis:6-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 5

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq4z4-3hWs7dSZLNBxwPv7O2aVJqOE8='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
      - ./models:/opt/airflow/models
      - ./metrics:/opt/airflow/metrics
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      retries: 5
    restart: always

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq4z4-3hWs7dSZLNBxwPv7O2aVJqOE8='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
      - ./models:/opt/airflow/models
      - ./metrics:/opt/airflow/metrics
    command: scheduler
    restart: always

  # Airflow Worker
  airflow-worker:
    image: apache/airflow:2.7.1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: 'UKMzEm3yIuFYEq4z4-3hWs7dSZLNBxwPv7O2aVJqOE8='
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
      - ./models:/opt/airflow/models
      - ./metrics:/opt/airflow/metrics
    command: celery worker
    restart: always

  # MLflow Tracking Server
  mlflow:
    image: python:3.9-slim
    depends_on: # <-- IMPROVEMENT: Added dependency on postgres
      postgres:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlflow/mlruns
    working_dir: /mlflow
    command: > # <-- IMPROVEMENT: Command now uses Postgres as the backend store instead of SQLite
      bash -c "pip install mlflow psycopg2-binary boto3 &&
               mlflow server
               --host 0.0.0.0
               --port 5000
               --backend-store-uri postgresql+psycopg2://airflow:airflow@postgres/airflow
               --default-artifact-root /mlflow/mlruns"

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Model API Service
  model-api:
    build:
      # NOTE: Using '.' as context is acceptable IF you have a comprehensive .dockerignore file at the root
      # to prevent copying unnecessary files into the build context.
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000" # <-- ASSUMPTION: Port 8000 is for the API, not Prometheus
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - MODEL_PATH=/app/models
      - DATA_PATH=/app/data
    depends_on:
      - postgres

  # Spark Environment (for data processing)
  spark-env:
    build:
      # NOTE: Using '.' as context is acceptable IF you have a comprehensive .dockerignore file at the root.
      context: .
      dockerfile: Dockerfile.spark
    volumes:
      - ./data:/app/data
      - ./scripts:/app/scripts
    environment:
      - SPARK_HOME=/opt/spark

  # React Frontend
  frontend:
    build:
      context: ./frontend # This is correct and was the main bug fix.
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src # More specific volume mount for hot-reloading
    environment:
      # <-- IMPROVEMENT: Containers talk to each other using service names, not localhost.
      # Also assuming the API runs on port 8000 as defined in this file.
      - REACT_APP_API_URL=http://model-api:8000
    depends_on:
      - model-api

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: